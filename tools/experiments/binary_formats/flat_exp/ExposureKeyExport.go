// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat_exp

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExposureKeyExport struct {
	_tab flatbuffers.Table
}

func GetRootAsExposureKeyExport(buf []byte, offset flatbuffers.UOffsetT) *ExposureKeyExport {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExposureKeyExport{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ExposureKeyExport) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExposureKeyExport) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ExposureKeyExport) StartTimestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKeyExport) MutateStartTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *ExposureKeyExport) EndTimestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKeyExport) MutateEndTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ExposureKeyExport) Region() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ExposureKeyExport) Keys(obj *ExposureKey, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ExposureKeyExport) KeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExposureKeyExport) BatchNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKeyExport) MutateBatchNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *ExposureKeyExport) BatchSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKeyExport) MutateBatchSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func ExposureKeyExportStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ExposureKeyExportAddStartTimestamp(builder *flatbuffers.Builder, startTimestamp int64) {
	builder.PrependInt64Slot(0, startTimestamp, 0)
}
func ExposureKeyExportAddEndTimestamp(builder *flatbuffers.Builder, endTimestamp int64) {
	builder.PrependInt64Slot(1, endTimestamp, 0)
}
func ExposureKeyExportAddRegion(builder *flatbuffers.Builder, region flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(region), 0)
}
func ExposureKeyExportAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(keys), 0)
}
func ExposureKeyExportStartKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExposureKeyExportAddBatchNum(builder *flatbuffers.Builder, batchNum int32) {
	builder.PrependInt32Slot(4, batchNum, 0)
}
func ExposureKeyExportAddBatchSize(builder *flatbuffers.Builder, batchSize int32) {
	builder.PrependInt32Slot(5, batchSize, 0)
}
func ExposureKeyExportEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
