// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat_exp

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExposureKey struct {
	_tab flatbuffers.Table
}

func GetRootAsExposureKey(buf []byte, offset flatbuffers.UOffsetT) *ExposureKey {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExposureKey{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ExposureKey) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExposureKey) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ExposureKey) ExposureKey(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ExposureKey) ExposureKeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExposureKey) ExposureKeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ExposureKey) MutateExposureKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ExposureKey) IntervalNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKey) MutateIntervalNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ExposureKey) IntervalCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKey) MutateIntervalCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ExposureKey) TransmissionRisk() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExposureKey) MutateTransmissionRisk(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func ExposureKeyStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ExposureKeyAddExposureKey(builder *flatbuffers.Builder, exposureKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(exposureKey), 0)
}
func ExposureKeyStartExposureKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ExposureKeyAddIntervalNumber(builder *flatbuffers.Builder, intervalNumber int32) {
	builder.PrependInt32Slot(1, intervalNumber, 0)
}
func ExposureKeyAddIntervalCount(builder *flatbuffers.Builder, intervalCount int32) {
	builder.PrependInt32Slot(2, intervalCount, 0)
}
func ExposureKeyAddTransmissionRisk(builder *flatbuffers.Builder, transmissionRisk int32) {
	builder.PrependInt32Slot(3, transmissionRisk, 0)
}
func ExposureKeyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
