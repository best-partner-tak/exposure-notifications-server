syntax = "proto3";

option go_package = "pkg/pb;pb";

message FederationFetchRequest {
	string fetchType = 1; // required
	repeated string regionIdentifiers = 2;
	repeated string excludeRegionIdentifiers = 3;
	int64 lastFetchResponseKeyTimestamp = 4; // required

	// regionIdentifiers, excludeRegionIdentifiers, lastFetchResponseKeyTimestamp must be stable to send a fetchToken.
	string nextFetchToken = 5;
}

message FederationFetchResponse {
	repeated ContactTracingResponse response = 1;
	bool partialResponse = 2; // required
	string nextFetchToken = 3; // nextFetchToken will be present if partialResponse==true
	int64 fetchResponseKeyTimestamp = 4; // required
}

message ContactTracingResponse {
	repeated ContactTracingInfo contactTracingInfo = 1;
	repeated string regionIdentifiers = 2;
}

message ContactTracingInfo {
	DiagnosisStatus diagnosisStatus = 1;  // required
	repeated DiagnosisKey diagnosisKeys = 2;
	string verificationAuthorityName = 3;  // TODO(jasonco): need to group on this.
}

enum DiagnosisStatus {
	unknown = 0;
	positive_verified = 1;
	self_reported = 2;
}

message DiagnosisKey {
	bytes diagnosisKey = 1; // required
	int64 intervalNumber = 2; // required
	int64 intervalCount = 3; // required
}

service Federation {
	rpc Fetch (FederationFetchRequest) returns (FederationFetchResponse) {}
}
